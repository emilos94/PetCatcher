#version 330 core
out vec4 FragColor;

in vec3 frag_position;
in vec3 pass_normal;
in vec2 pass_uv;
flat in int pass_index;
in vec4 frag_position_light_space;

uniform vec3 colors[20];
uniform float use_colors[20];
uniform float use_textures[20];
uniform sampler2D shadow_depthmap;

uniform float ambient_strength;
uniform vec3 light_color;
uniform vec3 light_position;

float shadow_calculation(vec4 frag_pos_light_space, vec3 normal, vec3 light_direction) {
    vec3 proj_coords = frag_pos_light_space.xyz / frag_pos_light_space.w;
    proj_coords = proj_coords * 0.5 + 0.5;
    
    // get closest depth value from light's perspective (using [0,1] range fragPosLight as coords)
    float closest_depth = texture(shadow_depthmap, proj_coords.xy).r;
    
    // get depth of current fragment from light's perspective
    float current_depth = proj_coords.z;

    float bias = 0.002;
    //float bias = max(0.05 * (1.0 - dot(light_direction, normal)), 0.005);  

    float shadow = 0.0;
    vec2 texel_size = 1.0 / textureSize(shadow_depthmap, 0);
    int pcf_count = 2;
    for(int x = -pcf_count; x <= pcf_count; ++x) {
        for(int y = -pcf_count; y <= pcf_count; ++y) {
            float pcf_depth = texture(shadow_depthmap, proj_coords.xy + vec2(x, y) * texel_size).r; 
            shadow += current_depth - bias > pcf_depth ? 1.0 : 0.0;        
        }    
    }
    
    float sample_count = pcf_count * 2.0 + 1.0;
    shadow /= (sample_count * sample_count);

    if(proj_coords.z > 1.0)
        shadow = 0.0;

    return shadow;
}

void main() {
    vec3 normal = normalize(pass_normal);

    vec3 light_direction = normalize(light_position - frag_position);
    float diff = max(dot(light_direction, normal), 0.0);
    vec3 diffuse = diff * light_color;

    vec3 ambient = ambient_strength * light_color;

    vec4 object_color = vec4(colors[pass_index] * use_colors[pass_index], 1.0);

    float shadow = shadow_calculation(frag_position_light_space, normal, light_direction);
    
    FragColor = object_color * vec4(ambient + (1.0 - shadow) + diffuse, 1.0);
}
